{"version":3,"sources":["firebase/index.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","ReactFirebaseFileUpload","useState","image","setImage","setUrl","progress","setProgress","console","log","className","value","max","type","onChange","e","target","files","onClick","ref","name","put","on","snapshot","Math","round","bytesTransferred","totalBytes","error","child","getDownloadURL","then","url","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"yNAgBAA,IAASC,cAbc,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAOjB,IAAMC,EAAUV,IAASU,UC4EVC,G,MAxEiB,WAAO,IAAD,EACVC,mBAAS,MADC,mBAC7BC,EAD6B,KACtBC,EADsB,OAEdF,mBAAS,IAFK,mBAExBG,GAFwB,aAGJH,mBAAS,GAHL,mBAG7BI,EAH6B,KAGnBC,EAHmB,KAsCpC,OAFAC,QAAQC,IAAI,UAAWN,GAGrB,6BAEI,yBAAKO,UAAU,OAOf,yBAAKA,UAAU,OAEf,yBAAKA,UAAU,MAEb,8BAAUC,MAAOL,EAAUM,IAAI,QAC/B,6BACA,6BACA,2BAAOC,KAAK,OAAOC,SAlDN,SAAAC,GACfA,EAAEC,OAAOC,MAAM,IACjBb,EAASW,EAAEC,OAAOC,MAAM,OAiDpB,4BAAQC,QA7CK,WACAlB,EAAQmB,IAAR,iBAAsBhB,EAAMiB,OAAQC,IAAIlB,GAChDmB,GACT,iBACA,SAAAC,GACE,IAAMjB,EAAWkB,KAAKC,MACnBF,EAASG,iBAAmBH,EAASI,WAAc,KAEtDpB,EAAYD,MAEd,SAAAsB,GACEpB,QAAQC,IAAImB,MAEd,WACE5B,EACGmB,IAAI,UACJU,MAAM1B,EAAMiB,MACZU,iBACAC,MAAK,SAAAC,GACJ3B,EAAO2B,WA0BT,cClEUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAApB,GACLpB,QAAQoB,MAAMA,EAAMqB,a","file":"static/js/main.1b5d278f.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBFZKaanXXd7XymYQArdXTM2u5osRkSrIc\",\n  authDomain: \"fir-react-up.firebaseapp.com\",\n  databaseURL: \"https://fir-react-up.firebaseio.com\",\n  projectId: \"fir-react-up\",\n  storageBucket: \"fir-react-up.appspot.com\",\n  messagingSenderId: \"1047300457652\",\n  appId: \"1:1047300457652:web:cbe2250a3328ab2e6183e1\",\n  measurementId: \"G-32M9JV62FZ\"\n\n\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst storage = firebase.storage();\n\nexport { storage, firebase as default };\n","import React, { useState } from \"react\";\nimport { storage } from \"./firebase\";\n\nimport './App.css';\n\n\n\n/* function App() {\n  return (\n    <div>\n    <div className=\"App\">\n    <h1 className=\"title\">100 зураг 15000</h1>\n  <button className=\"button\" type=\"button\">ЗУРАГ ИЛГЭЭХ ТОВЧ</button>\n     <Nemeh/>\n    </div>\n    </div>\n  );\n}\n\nexport default App; */\n\n\nconst ReactFirebaseFileUpload = () => {\n  const [image, setImage] = useState(null);\n  const [url, setUrl] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n\n  const handleChange = e => {\n    if (e.target.files[0]) {\n      setImage(e.target.files[0]);\n    }\n  };\n\n  const handleUpload = () => {\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n    uploadTask.on(\n      \"state_changed\",\n      snapshot => {\n        const progress = Math.round(\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n        );\n        setProgress(progress);\n      },\n      error => {\n        console.log(error);\n      },\n      () => {\n        storage\n          .ref(\"images\")\n          .child(image.name)\n          .getDownloadURL()\n          .then(url => {\n            setUrl(url);\n          });\n      }\n    );\n  };\n\n  console.log(\"image: \", image);\n\n  return (\n    <div>\n        \n        <div className=\"Aa\">\n          \n          \n          \n        \n        </div>\n\n        <div className=\"Bb\">\n        </div>\n        <div className=\"Cc\">\n          \n          <progress value={progress} max=\"100\" />\n          <br />\n          <br />\n          <input type=\"file\" onChange={handleChange} />\n          <button onClick={handleUpload}>Upload</button>\n          \n          \n        \n        </div>\n          \n        \n        \n        \n      \n      </div>\n   \n  );\n\n};\n\nexport default ReactFirebaseFileUpload ;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ReactFirebaseFileUpload from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReactFirebaseFileUpload/>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}